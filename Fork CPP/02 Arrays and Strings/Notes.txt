Character arrays vs strings : 
- A Character array is simply an array of Characters that can be terminated by null Character.
- A String is a class which defines objects that can be represented as stream of characters.
- Size of the Character array has to be allocated statically ie. more memory cannot be allocated at runtime if required.
- Unused allocated memory gets wasted in case of Character array.
- In Strings memory is allocated dynamically at runtime on demand.
- As no memory is pre-allocated, no memory is wasted.
- There is a threat of array decay in case of Character array.
- As Strings are represented as objects, no array decay occurs.
- Implementation of character array is faster than std:: string. Strings are slower when compared to implementation than character array.
- Character array do not offer much inbuilt functions to manipulate strings. String class defines a number of functionalities which allow
  manifold operations on strings.

Dynamic Memory Allocation :
- C Dynamic Memory Allocation can be defined as a procedure in which the size of a data structure (like Array) is changed during the runtime.
- C provides some functions to achieve these tasks. There are 4 library functions provided by C defined under <stdlib.h> header file to 
  facilitate dynamic memory allocation in C programming. They are:
    malloc()
    calloc()
    free()
    realloc()

1) malloc :
    “malloc” or “memory allocation” method in C is used to dynamically allocate a single large block of memory with the specified size. 
    It returns a pointer of type void which can be cast into a pointer of any form.
    It initializes each block with default garbage value.

    syntax: ptr = (cast-type*) malloc(byte-size)
    example : int *ptr = (int*) malloc(100 * sizeof(int));
    explanation : Since the size of int is 4 bytes, this statement will allocate 400 bytes of memory. And, the pointer ptr holds the address of the first byte in the allocated memory.

2) calloc :
    “calloc” or “contiguous allocation” method in C is used to dynamically allocate the specified number of blocks of memory of the specified type. 
    It initializes each block with a default value ‘0’

    syntax : ptr = (cast-type*)calloc(n, element-size)
    example : ptr = (float*) calloc(100, sizeof(float));
    explanation : This statement allocates contiguous space in memory for 25 elements each with the size of the float.

3) free :
    “free” method in C is used to dynamically de-allocate the memory. 
    The memory allocated using functions malloc() and calloc() is not de-allocated on their own. 
    Hence the free() method is used, whenever the dynamic memory allocation takes place. 
    It helps to reduce wastage of memory by freeing it.

    syntax : free(ptr)

4) realloc :
    “realloc” or “re-allocation” method in C is used to dynamically change the memory allocation of a previously allocated memory.
    In other words, if the memory previously allocated with the help of malloc or calloc is insufficient, realloc can be used to dynamically re-allocate memory. 
    re-allocation of memory maintains the already present value and new blocks will be initialized with default garbage value.

    syntax : ptr = realloc(ptr, newSize)
    example : ptr = realloc(ptr, 10 * sizeof(int))
    explanation : here ptr is reallocated with new size "newSize"

    
Note : 
    If the space is insufficient, allocation fails and a NULL pointer is returned.
    void pointer can be casted to any datatype pointer.

